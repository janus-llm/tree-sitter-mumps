{
  "name": "mumps",
  "rules": {
    "program": {
      "type": "REPEAT1",
      "content": {
        "type": "SYMBOL",
        "name": "_statement"
      }
    },
    "_statement": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_simple_statement"
        },
        {
          "type": "SYMBOL",
          "name": "_compound_statement"
        }
      ]
    },
    "comment": {
      "type": "TOKEN",
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "STRING",
            "value": ";"
          },
          {
            "type": "PATTERN",
            "value": ".*"
          }
        ]
      }
    },
    "_simple_statement": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "assignment"
        },
        {
          "type": "SYMBOL",
          "name": "call"
        },
        {
          "type": "SYMBOL",
          "name": "_write_call"
        },
        {
          "type": "SYMBOL",
          "name": "comment"
        }
      ]
    },
    "_compound_statement": {
      "type": "CHOICE",
      "members": []
    },
    "_expression": {
      "type": "CHOICE",
      "members": [
        {
          "type": "PREC",
          "value": 2,
          "content": {
            "type": "SYMBOL",
            "name": "binary_expression"
          }
        },
        {
          "type": "SYMBOL",
          "name": "unary_expression"
        },
        {
          "type": "SYMBOL",
          "name": "local_variable"
        },
        {
          "type": "SYMBOL",
          "name": "global_variable"
        },
        {
          "type": "SYMBOL",
          "name": "local_array"
        },
        {
          "type": "SYMBOL",
          "name": "literal"
        }
      ]
    },
    "unary_expression": {
      "type": "PREC",
      "value": 2,
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": "-"
              },
              {
                "type": "SYMBOL",
                "name": "_expression"
              }
            ]
          },
          {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": "!"
              },
              {
                "type": "SYMBOL",
                "name": "_expression"
              }
            ]
          }
        ]
      }
    },
    "binary_expression": {
      "type": "PREC",
      "value": 2,
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "PREC_LEFT",
            "value": 1,
            "content": {
              "type": "SEQ",
              "members": [
                {
                  "type": "SYMBOL",
                  "name": "_expression"
                },
                {
                  "type": "STRING",
                  "value": "*"
                },
                {
                  "type": "SYMBOL",
                  "name": "_expression"
                }
              ]
            }
          },
          {
            "type": "PREC_LEFT",
            "value": 1,
            "content": {
              "type": "SEQ",
              "members": [
                {
                  "type": "SYMBOL",
                  "name": "_expression"
                },
                {
                  "type": "STRING",
                  "value": "+"
                },
                {
                  "type": "SYMBOL",
                  "name": "_expression"
                }
              ]
            }
          },
          {
            "type": "PREC_LEFT",
            "value": 1,
            "content": {
              "type": "SEQ",
              "members": [
                {
                  "type": "SYMBOL",
                  "name": "_expression"
                },
                {
                  "type": "STRING",
                  "value": "/"
                },
                {
                  "type": "SYMBOL",
                  "name": "_expression"
                }
              ]
            }
          },
          {
            "type": "PREC_LEFT",
            "value": 1,
            "content": {
              "type": "SEQ",
              "members": [
                {
                  "type": "SYMBOL",
                  "name": "_expression"
                },
                {
                  "type": "STRING",
                  "value": "-"
                },
                {
                  "type": "SYMBOL",
                  "name": "_expression"
                }
              ]
            }
          },
          {
            "type": "PREC_LEFT",
            "value": 1,
            "content": {
              "type": "SEQ",
              "members": [
                {
                  "type": "SYMBOL",
                  "name": "_expression"
                },
                {
                  "type": "STRING",
                  "value": "_"
                },
                {
                  "type": "SYMBOL",
                  "name": "_expression"
                }
              ]
            }
          }
        ]
      }
    },
    "arguments": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_expression"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": ","
              },
              {
                "type": "SYMBOL",
                "name": "_expression"
              }
            ]
          }
        }
      ]
    },
    "_write_outro": {
      "type": "STRING",
      "value": ",!"
    },
    "_write_call": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "call"
        },
        {
          "type": "SYMBOL",
          "name": "_write_outro"
        }
      ]
    },
    "function": {
      "type": "SYMBOL",
      "name": "_alphanum"
    },
    "call": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "function"
        },
        {
          "type": "SYMBOL",
          "name": "arguments"
        }
      ]
    },
    "set": {
      "type": "PATTERN",
      "value": "set|s"
    },
    "local_variable": {
      "type": "PATTERN",
      "value": "[a-zA-Z%][a-zA-Z0-9%]+"
    },
    "global_variable": {
      "type": "PATTERN",
      "value": "[\\^][a-zA-Z%][a-zA-Z0-9%]+"
    },
    "assignment": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "set"
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "SYMBOL",
              "name": "local_variable"
            },
            {
              "type": "SYMBOL",
              "name": "global_variable"
            }
          ]
        },
        {
          "type": "STRING",
          "value": "="
        },
        {
          "type": "SYMBOL",
          "name": "_expression"
        }
      ]
    },
    "local_array": {
      "type": "SEQ",
      "members": [
        {
          "type": "PATTERN",
          "value": "[a-zA-Z%][a-zA-Z0-9%]+"
        },
        {
          "type": "STRING",
          "value": "("
        },
        {
          "type": "PATTERN",
          "value": "[a-zA-Z0-9]"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": ","
              },
              {
                "type": "PATTERN",
                "value": "[a-zA-Z0-9]"
              }
            ]
          }
        },
        {
          "type": "STRING",
          "value": ")"
        }
      ]
    },
    "_alphanum": {
      "type": "PATTERN",
      "value": "[A-Za-z0-9]+"
    },
    "literal": {
      "type": "PATTERN",
      "value": "((\"[^\"]*\")|([^\\x00-\\x20\\x2c\\x22\\x2b\\x2a\\x2d]+))+"
    },
    "newline": {
      "type": "PATTERN",
      "value": "[\\s]*\\n"
    }
  },
  "extras": [
    {
      "type": "PATTERN",
      "value": "\\s"
    }
  ],
  "conflicts": [],
  "precedences": [],
  "externals": [],
  "inline": [],
  "supertypes": []
}
